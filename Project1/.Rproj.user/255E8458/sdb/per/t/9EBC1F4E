{
    "collab_server" : "",
    "contents" : "########################################################################\n## Get data for Project 1\n## Analyze Project 1 question\n########################################################################\nrm( list = ls( all.names = TRUE ) )\nrm( list = objects( all.names = TRUE ) )\n\n########################################################################\n## Load header files and source functions\n########################################################################\nlibrary( ggplot2 )\nlibrary( RFunctionsSN )\nlibrary( xtable )\n########################################################################\n## Command line arguments for some static variables\n########################################################################\nProjectPath <- '~/Stat/Stat_Consulting/TraciSnedden/Project1/'\n#ProjectPath <- '~/Documents/snandi/Stat/Stat_Consulting/TraciSnedden/Project1/'\n\nDataPath <- paste0( ProjectPath, 'Data/' )\nfileNameData <- 'InjuryDataFinal_TotalDays.csv'\nfileNameCodedData <- 'DataCoded.RData'\n\nsource( 'Codebook.R' )\nsource( 'Project1_Static.R' )\n\n########################################################################\n\n########################################################################\n## Functions\n########################################################################\ngetCodedData <- function( folderPath, fileName ){\n  filePath <- paste0( folderPath, fileName )\n  load( filePath )\n  return( DataCoded )\n}\n\ngetProject1Data <- function( folderPath, fileName ){\n  DataCoded <- getCodedData( folderPath, fileName )\n  DataProject1 <- DataCoded[, Project1_VarNames ]\n  colnames( DataProject1 ) <- Project1_VarRenames\n  DataProject1 <- subset( DataProject1, InjuryType == 'Concussion' )\n  DataProject1$InjuryType <- NULL\n  return( DataProject1 )\n}\n\n\n########################################################################\n## Data\n########################################################################\nDataProject1 <- getProject1Data( folderPath = DataPath, fileName = fileNameCodedData )\nDataProject1NoNA <- subset( DataProject1, !is.na( as.vector( ReportedConcussion ) ) )\nDataProject1NoNA$ReportedConcussion <- as.factor( as.vector( DataProject1NoNA$ReportedConcussion ) )\ntable( DataProject1$ReportedConcussion )\n\n########################################################################\n## Preliminary analysis\n########################################################################\n\n## Age\nsummary( DataProject1$Age )\n\nPlot1Age <- qplot() + geom_boxplot( aes( x = ReportedConcussion, y = Age, fill = ReportedConcussion ), \n                        data = subset( DataProject1NoNA, Age < 35 ) ) +\n  scale_fill_manual( breaks = c( \"NO\", \"YES\" ), values = c( \"red\", \"gray\" ) ) +\n  theme( legend.position = 'top' ) + \n  ylab( label = 'Age' )\n\nPlot2AgeGender <- qplot() + geom_boxplot( aes( x = ReportedConcussion, y = Age, fill = ReportedConcussion ), \n                                    data = subset( DataProject1NoNA, Age < 35 ) ) +\n  scale_fill_manual( breaks = c( \"NO\", \"YES\" ), values = c( \"red\", \"gray\" ) ) +\n  theme( legend.position = 'top' ) +\n  ylab( label = 'Age' ) +\n  facet_grid( ~ Gender )\n\n## Gender\nDataProject1$Gender <- as.factor( as.vector( DataProject1$Gender ) )\ntableGender <- table( DataProject1$ReportedConcussion, DataProject1$Gender )\ntableGenderNoNA <- table( DataProject1NoNA$ReportedConcussion, DataProject1NoNA$Gender )\n\nxtable( t( tableGender ), caption = \"Self-reporting of concussion\", label = \"tab:Tab2Gender\" )\n\nchisq.test( t( tableGenderNoNA ) )\n\n## Race\ntableRace <- table( DataProject1$ReportedConcussion, DataProject1$Race )\nxtable( t( tableRace ), caption = \"Self-reporting of concussion by Race\", label = \"tab:Tab3Race\" )\n\n## Ethnicity\ntableEth <- table( DataProject1$ReportedConcussion, as.vector( DataProject1$Ethnicity ) )\nxtable( t( tableEth ), caption = \"Self-reporting of concussion by Ethnicity\", label = \"tab:Tab4Eth\" )\n\n## Academic status\ntableAcad <- table( DataProject1$ReportedConcussion, DataProject1$AcadStatus )\ncolnames( tableAcad )[1] <- 'NA'\nxtable( t( tableAcad ), caption = \"Self-reporting of concussion by Academic status\", label = \"tab:Tab5Acad\" )\n\n## Describes you\ntableDesc <- table( DataProject1$ReportedConcussion, DataProject1$DescribeYou )\ncolnames( tableDesc )[1] <- 'NA'\nxtable( t( tableDesc ), caption = \"Self-reporting of concussion by type of activity\", label = \"tab:Tab6Desc\" )\n\n## Reason\ntableReason <- table( DataProject1$ReportedConcussion, as.vector( DataProject1$Reason ) )\nxtable( t( tableReason ), caption = \"Self-reporting of concussion by reason\", label = \"tab:Tab7Reason\" )\n\n## How long after injury did you report?\nsummary( DataProject1$ReportHours )\nDataReported <- subset( DataProject1, ReportedConcussion == \"YES\" )\n\n\naggregate( ReportHours ~ Gender, data = subset( DataReported, ReportHours < 168 ), FUN = length )\naggregate( ReportHours ~ Gender, data = subset( DataReported, ReportHours < 168 ), FUN = mean )\naggregate( ReportHours ~ Gender, data = subset( DataReported, ReportHours < 168 ), FUN = sd )\naggregate( ReportHours ~ Gender, data = subset( DataReported, ReportHours < 168 ), FUN = median )\nmean( subset( DataReported, ReportHours < 168 )$ReportHours )\nmedian( subset( DataReported, ReportHours < 168 )$ReportHours )\nsd( subset( DataReported, ReportHours < 168 )$ReportHours )\n\naggregate( ReportHours ~ Gender, data = DataReported, FUN = length )\naggregate( ReportHours ~ Gender, data = DataReported, FUN = mean )\naggregate( ReportHours ~ Gender, data = DataReported, FUN = sd )\naggregate( ReportHours ~ Gender, data = DataReported, FUN = median )\nmean( DataReported$ReportHours )\nmedian( DataReported$ReportHours )\nsd( DataReported$ReportHours )\n\n\nPlot3ReportHours <- qplot() + geom_boxplot( aes( x = Gender, y = ReportHours, fill = Gender ), \n                                    data = subset( DataReported, ReportHours < 100 ) ) +\n  theme( legend.position = 'top' ) +\n  ylab( label = 'Hours reported after' )\n\nt.test( x = DataReported$ReportHours[ DataReported$Gender == \"Male\" ], \n        y = DataReported$ReportHours[ DataReported$Gender == \"Female\" ], \n        var.equal = FALSE, \n        alternative = \"two.sided\" )\n\n## Who did you report it to? \nDataReported$ReportedTo <- as.factor( as.vector( DataReported$ReportedTo ) )\ntableWho <- table( DataReported$ReportedTo )\n\n## If no, why did you not report it?  \nDataNotReported <- subset( DataProject1, ReportedConcussion == \"NO\" )\ntableWhyNot <- table( as.vector( DataNotReported$WhyNotReported ) )\nxt <- xtable( tableWhyNot, caption = \"Why did they not report\", label = \"tab:Tab8WhyNot\" )\nnames(xt) <- 'responses'\nxt\n\n## Model\nstr( DataProject1NoNA$ReportedConcussion )\nDataProject1NoNA$Y <- TRUE\nDataProject1NoNA$Y[DataProject1NoNA$ReportedConcussion == \"NO\" ] <- FALSE\ntable( DataProject1NoNA$Y )\nDataProject1NoNA$Gender <- as.factor( as.vector( DataProject1NoNA$Gender ) )\nstr( DataProject1NoNA$Gender )\n\nData <- DataProject1NoNA[,c('Y', 'Age', 'Gender')]\nData$Age <- Data$Age - mean( Data$Age )\nModel1 <- glm( as.numeric(Y) ~ Age + Gender , data = Data, family = \"binomial\" )\nsummary( Model1)\n\nModel2 <- glm( as.numeric(Y) ~ Age + Gender + Age*Gender, data = Data, family = \"binomial\" )\nsummary( Model2 )\nconfint( Model2 )\nround( exp( confint( Model2 ) ), 4 ) \nexp( coef( Model2 ) )\n\nprint( xtable( round( exp( confint( Model2 ) ), 4 ), digits = c(0, 3, 3), \n               caption = \"Confidence intervals of odds ratio\", label = \"tab:Tab9CI\" ), \n       table.placement = \"H\" )\n\nnewData <- as.data.frame( rbind( cbind( Age = 18, Gender = \"Female\" ), \n                  cbind( Age = 18, Gender = \"Male\" ), \n                  cbind( Age = 22, Gender = \"Female\"),\n                  cbind( Age = 22, Gender = \"Male\")\n) )\nnewData$Age <- as.numeric( as.vector( newData$Age ) ) -  mean(DataProject1NoNA$Age)\n\nexp( predict( Model2, newData ) )[1] /( 1 + exp( predict( Model2, newData ) )[1] )\nexp( predict( Model2, newData ) )[2] /( 1 + exp( predict( Model2, newData ) )[2] )\nexp( predict( Model2, newData ) )[3] /( 1 + exp( predict( Model2, newData ) )[3] )\nexp( predict( Model2, newData ) )[4] /( 1 + exp( predict( Model2, newData ) )[4] )\n\n####################################################################\n## New output table format\n####################################################################\nSummary <- summary( Model2 )$coefficients\n\nTable1 <- cbind( col1 = paste0( round( Summary[,'Estimate'], 2 ), ' (', round( Summary[,'Std. Error'], 2 ), ')' ), \n                col2 = round( Summary[,'z value'], 2 ), \n                col3 = round( exp( Summary[,'Estimate'] ), 2 )\n)\n\nTable2 <- round( exp( confint( Model2 ) ), 2 )\n\nTable <- cbind( Table1, Table2 )\nTable <- cbind( Predictor = rownames( Table ), Table )\ncolnames( Table ) <- c( 'Predictor', 'b(SE)', 'Wald', 'Odds Ratio', 'Lower OR', 'Upper OR' )\nTable[, 'Predictor'] <- c( 'Constant', 'Age', 'Male', 'Age:Male' )\n\nfor( Row in 1:nrow( Table ) ){\n  if( Summary[Row, 4] < 0.05 ){\n    Table[Row, 'Wald'] <- paste0( Table[Row, 'Wald'], '*' )\n  } \n}\n\nlogLik( Model2 )\n\nModel0 <- glm( as.numeric(Y) ~ 1, data = Data, family = \"binomial\" )\nsummary( Model0 )\nlogLik( Model0 )\n\nX2 <- 2*( logLik( Model2 )- logLik( Model0 ) ) # log-likelihood ratio test statistic\nas.numeric( X2 )\npvalX2 <- 1 - pchisq( X2, 3 )\n\nR2 <- ( summary( Model2 )$null.deviance - summary( Model2 )$deviance )/summary( Model2 )$null.deviance\n\nFitted <- fitted.values( Model2 ) > 0.5\nsum( Fitted == Data$Y )/length( Fitted )\n",
    "created" : 1491434245215.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2455090108",
    "id" : "9EBC1F4E",
    "lastKnownWriteTime" : 1491489807,
    "last_content_update" : 1491489807748,
    "path" : "~/Stat/Stat_Consulting/TraciSnedden/Project1/Project1_Analysis.R",
    "project_path" : "Project1_Analysis.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}